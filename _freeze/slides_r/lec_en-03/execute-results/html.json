{
  "hash": "28fdbff09632f958c1865b8d8a7fff76",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Simple statistics using R\"\nsubtitle: \"First steps\"\nauthor: \"Julien Martin\"\ninstitute: \"University of Ottawa\"\ndate: today\nfrom: markdown+emoji\nformat:\n  blackboard-revealjs: \n    width: 1244\n    height: 700\n    chalkboard: true\n#    output-location: column-fragment\n#    logo: assets/MAD_logo_small_rb.png\n    footer: Intro to R\n    show-notes: false\n    output-ext: slides.html\n  html:\n    self-contained: true\n    number-sections: true\n    format-links: false\n    css: assets/css/notes.css\n    number-depth: 2\n    output-ext: notes.html\n    comments:\n      hypothesis: true\neditor:\n  render-on-save: false\n---\n\n\n## learning outcomes\n\n\n\n\n\n\n\n\n\n- introduce you to some basic statistics in R  ✔️\n\n- focus on linear models ✔️\n\n- fit simple linear models in R ✔️\n\n- check linear model assumptions in R ✔️\n\n\n# statistics using R\n\n## Scratching the surface\n- many, many statistical tests available in R \n\n- range from the simple to the highly complex\n\n- many are included in standard base installation  of R\n\n- you can extend the range of statistics by installing additional packages\n\n\n\n## an example \n\n:::: {.columns}\n::: {.column}\n- does seeding clouds with dimethylsulphate alter the moisture content of clouds (can we make it rain!)\n\n- 10 random clouds were seeded and 10 random clouds unseeded\n\n-  what’s the null hypothesis?\n\n:::\n::: {.column}\n![](assets/img/clouds.gif)\n:::\n::::\n\n::: {.content-visible when-format=\"revealjs\"}\n. . .\n:::\n\n- no difference in mean moisture content between seeded and unseeded clouds\n\n## Plotting the data\n\n::: {.panel-tabset}\n## Data\n- plot these data\n\n- interpretation?\n\n-  what type of statistical test do you want to use?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclouds <- read.csv('data/clouds.csv')\nstr(clouds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t20 obs. of  2 variables:\n $ moisture : num  301 302 299 316 307 ...\n $ treatment: chr  \"seeded\" \"seeded\" \"seeded\" \"seeded\" ...\n```\n\n\n:::\n:::\n\n## Plot\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lec_en-03_files/figure-revealjs/plot-1.png){fig-align='center' width=3600}\n:::\n:::\n\n:::\n\n\n\n## t-test\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nt.test(clouds$moisture~clouds$treatment, var.equal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tTwo Sample t-test\n\ndata:  clouds$moisture by clouds$treatment\nt = 2.5404, df = 18, p-value = 0.02051\nalternative hypothesis: true difference in means between group seeded and group unseeded is not equal to 0\n95 percent confidence interval:\n  1.482679 15.657321\nsample estimates:\n  mean in group seeded mean in group unseeded \n                303.63                 295.06 \n```\n\n\n:::\n:::\n\n\n- reject or fail to reject the null hypothesis?\n\n\n## linear models in R\n\n\n\n- an alternative, but equivalent approach is to use a linear model to compare the means in each group\n\n- general linear models are generally thought of as simple models, but can be used to model a wide variety of data and exp. designs\n\n- traditionally statistics is performed (and taught) like using a recipe book (ANOVA, *t*-test, ANCOVA etc) \n\n- general linear models provide a coherent and theoretically satisfying framework on which to conduct your analyses \n\n## what are linear models?\n\n- *t*-test\n\n- ANOVA\n\n- factorial ANOVA\n\n- ANCOVA\n\n- linear regression\n\n- multiple regression\n\n- etc, etc\n\n\n## model formula\n\n\n- general linear modelling is based around the concept of model formulae\n\n\\\n\n[`response variable ~ explanatory variable(s) + error`]{.center}\n\n\\\n\n- literally read as *‘variation in response variable modelled as a \n  function of the explanatory variable(s) plus variation not explained\n  by the explanatory variables’*\n  \n- it's the attributes of the response and explanatory variables that determines the type of linear model fitted \n\n\n## linear models in R\n\n\n\n-  the function for carrying out linear regression in R is `lm()`\n\n-the response variable comes first, then the tilde `~` then the name of the explanatory variable\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclouds.lm <- lm(moisture ~ treatment, data=clouds)\n```\n:::\n\n\n- how does R know that you want to perform a *t*-test (ANOVA)?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(clouds$treatment)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n- here the explanatory variable is a factor\n\n\n\n## linear models in R\n\n\n- to display the ANOVA table use the `anova()` function\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nanova(clouds.lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalysis of Variance Table\n\nResponse: moisture\n          Df  Sum Sq Mean Sq F value  Pr(>F)  \ntreatment  1  367.22  367.22  6.4538 0.02051 *\nResiduals 18 1024.20   56.90                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n- do you notice anything familiar about the p value? \n\n- (hint: see the output from the *t*-test we did earlier)\n\n\n\n\n\n## linear models in R\n\n\n- we have sufficient evidence to reject the null hypothesis (as before) \n\n- therefore, there is a significant difference in the mean moisture content between clouds that were seeded and unseeded clouds\n\n- do we accept this inference?\n\n- what about assumptions?\n\n- we could use Shapiro-Wilks and *F* tests as before\n\n- much better to assess visually by plotting the residuals\n\n\n## Plotting residuals\n\n\n- `clouds.lm` is a linear model object we can do stuff with it\n\n- we can use the `plot()` function directly to display residual plots\n\n- normality assumption\n\n- equal variance assumption\n\n- unusual or influential observations\n\n## Plotting residuals\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2), bg = \"#FFFFFFCC\")\nplot(clouds.lm)\n```\n\n::: {.cell-output-display}\n![](lec_en-03_files/figure-revealjs/stats8-1.png){fig-align='center' width=3600}\n:::\n:::\n\n\n\n## other linear models\n\n\n\n| traditional name       |   model formula           |   R code                 |\n| :----------------------|:--------------------------|:-------------------------|\n| simple linear regression   |   Y ~ X1 (continuous)     |   `lm(Y ~ X)` |\n| one-way ANOVA          |  Y ~ X1 (categorical)     | `lm(Y ~ X)` |\n| two-way ANOVA          | Y ~ X1 (cat) + X2 (cat)   | `lm(Y ~ X1 + X2)` | \n| ANCOVA                 | Y ~ X1 (cat) + X2 (cont)  | `lm(Y ~ X1 * X2)` |\n| multiple regression    | Y ~ X1 (cont) + X2 (cont) | `lm(Y ~ X1 + X2)` |\n| factorial ANOVA        | Y ~ X1 (cat) * X2 (cat)   | `lm(Y ~ X1 * X2)` |\n\n\n\n# Thanks!\n\nCredit: I borrowed slides from [Alex Douglas](https://github.com/alexd106/).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}